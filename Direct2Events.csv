Scope,Name,Value,Warning,Critical,RightClickName,RightClickAction,RightClickInputs
Machine,RAM (GB),"[math]::Round( $computerinfo.TotalPhysicalMemory  / 1GB , 2 )",,$value -lt 26,,,
Machine,Free RAM (GB),"[math]::Round( $osinfo.FreePhysicalMemory  / 1MB , 2 )",$value -lt 10,$value -lt 5,,,
Machine,Virtual memory (GB),"[math]::Round( $osinfo.TotalVirtualMemorySize  / 1MB , 2 )",,,,,
Machine,Free virtual memory (GB),"[math]::Round( $osinfo.FreeVirtualMemory  / 1MB ,2 )",,,,,
Machine,Processors,$computerinfo.NumberOfLogicalProcessors,,,,,
Machine,Hypervisor,$vmInfo.VMHost,,,,,
Machine,Install Date,$osinfo.InstallDate,,,,,
Machine,OS,$osinfo.Caption,,,,,
Machine,Description,$osinfo.Description,,,,,
Machine,OS version,$osinfo.Version,,,,,
Machine,Service pack version,$osinfo.ServicePackMajorVersion,,,,,
Machine,Delivery Group,$deliveryGroup,[string]::IsNullOrEmpty( $value ),,,,
Machine,Machine Catalogue,$machineCatalogue,,,,,
Machine,Registration State,$brokerMachine.RegistrationState,,$value -ne 'Registered',,,
Machine,AppSense Deployment Group,$appsenseGroup.Name,$value -eq $null,,,
Machine,AppSense Deployment Group events,$appsenseGroup.EnterpriseAuditing.Count,$value -gt 30,$value -gt 50,,,
Machine,Last AppSense poll time,$appsenseMachine.LastPollTime,($value - (Get-Date)).TotalDays -gt 1,($value - (Get-Date)).TotalDays -gt 7,,,
Machine,AppSense download poll period (s),$appsenseGroup.PollPeriodSeconds,$value -lt 3600,$value -le 300,,,
Machine,AppSense upload poll period (s),$appsenseGroup.UploadPollPeriodSeconds,$value -lt 600,$value -le 300,,,
Machine,Published Applications,"$brokerMachine.PublishedApplications -join ""`n""",$value -eq $null,,,,
Machine,Zone,$brokerMachine.ZoneName,,,,,
Machine,Connected Users,$activeUsers,,,,,
Machine,Load Index,$brokerMachine.LoadIndex,,,,,
Machine,Disconnected Users,$disconnectedUsers,,,,,
Machine,Maintenance mode,$brokerMachine.InMaintenanceMode,,,,,
Machine,Logon mode,$brokerMachine.WindowsConnectionSetting,$value -ne 'LogonEnabled',,,,
Machine,Power State,$brokerMachine.PowerState,,,,,
Machine,Last boot time,$osinfo.LastBootUpTime,($value - (Get-Date)).TotalDays -gt 7,($value - (Get-Date)).TotalDays -gt 14,,,
Machine,Tags,"$brokermachine.Tags -join ""\n""",$unqualifiedMachineName -match '^YWCX[DA]' -and $brokermachine.Tags -and $brokermachine.Tags.Count -gt 1,$unqualifiedMachineName -match '^YWCX[DA]' -and ! $brokermachine.Tags,,,
Machine,vDisk in use,$vdisk.Name,,$value -ne $vdisks.Name,,,
Machine,vDisk assigned,$vdisks.Name,,,,,
Machine,vDisk mode,if (( ( $vdiskInfo | Select-String '^_DiskMode=')-split '=')[1] -eq 'P' ) { 'Private' } else { 'Shared' },$value -eq 'P',,,,
Machine,vDisk booted version,$pvsDeviceInfo.DiskVersion,,$value -ne $bootVersion,,,
Machine,vDisk version to boot,$bootVersion,,,,,
Machine,PVS Device Collection,$pvsDeviceInfo.CollectionName,,[string]::IsNullOrEmpty( $value ),,,
Machine,PVS Site Name,$pvsDeviceInfo.SiteName,,[string]::IsNullOrEmpty( $value ),,,
Machine,PVS RAM Cache (MB),$vdisk.WriteCacheSize,$value -lt 2048,$value -lt 512,,,
Machine,PVS Disk Size (GB),[math]::round($vdisk.DiskSize / 1GB),$value -lt 30,$value -lt 20,,,
Machine,PVS Disk Modified,$vdisk.Date,,,,,
Machine,Group Memberships Count,$machineDetails.MemberOf.Count,,$value -lt 1,,,
Machine,Group Memberships,"($machineDetails.MemberOf | Sort-Object | %{ (($_ -split ',')[0] -split '^CN=')[-1]}) -join ""`n""",,,,,
Machine,Account Created,$machineDetails.whenCreated,,,,,
Machine,Description,$machineDetails.Description,,,,,
Machine,Managed By,$machineDetails.ManagedBy,,,,,
Machine,"Ping Time (ms)","[math]::Round((Test-Connection $unqualifiedMachineName -Count 3 |Measure-Object -sum -Property ResponseTime).Sum/3,1)",$value -gt 10,$value -eq $null,,,
User,Account Locked,$userDetails.LockedOut,,$value,Unlock,C:Unlock-ADAccount -Identity $value,
User,Enabled,$userDetails.Enabled,,!$value,Enable,C:Enable-ADAccount -Identity $value,
User,Expires,$userDetails.AccountExpirationDate,($value - (Get-Date)).TotalDays -lt 30,($value - (Get-Date)).TotalDays -lt 10,Extend Account,Set-ADAccountExpiration $user -DateTime '##Input1',DatePickerXAML:DatePicked.SelectedDate:Choose New Account Expiry Date
User,Home Drive,$userDetails.HomeDrive,,[string]::IsNullOrEmpty( $value ),,,
User,Logon Script,$userDetails.ScriptPath,,,,,
User,Home Directory,$userDetails.HomeDirectory,,[string]::IsNullOrEmpty( $value ),Explore,explorer.exe $value,
User,Created,$userDetails.Created,,,,,
User,Account Changed,$userDetails.WhenChanged,,,,,
User,Password Changed,$userDetails.PasswordLastSet,,,,,
User,Password Expired,$userDetails.PasswordExpired,,$value,Reset Password,Set-ADAccountPassword -Identity $user -Reset -NewPassword (ConvertTo-SecureString -AsPlainText '##Input1') -Force,PasswordPickerXAML:passwordBox.Password:Choose New Password
User,Password Never Expires,$userDetails.PasswordNeverExpires,$value,,,,
User,Group Memberships Count,$userDetails.MemberOf.Count,$value -lt 10,$value -le 1,,,
User,Group Memberships,"($userDetails.MemberOf | Sort-Object | %{ (($_ -split ',')[0] -split '^CN=')[-1]}) -join ""`n""",,,,,
User,Primary Group,$userDetails.PrimaryGroup,,,,,
User,Name,$userDetails.Name,,,,,
User,SID,$userDetails.SID,,,,,
User,OU,$userDetails.DistinguishedName,,,,,
User,Full Name,($userdetails.GivenName + ' ' + $userDetails.Surname).Trim(),,,,,
User,Title,$userDetails.Title,,,,,
User,Department,$userDetails.Department,,,,,
User,Email,$userDetails.EmailAddress,,,Email,Start-Process -FilePath mailto:$value,
User,Office Phone,$userDetails.OfficePhone,,,,,
User,Telephone Number,$userDetails.TelephoneNumber,,,,,
